FROM julia/1.7-bullseye

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

ENV SHELL /bin/bash

# Set up user
ARG NB_UID
ARG NB_USER
ENV NB_UID 1000
ENV NB_USER nbuser
ENV USER ${NB_USER}
ENV HOME /home/${NB_USER}

RUN echo $NB_UID
RUN echo $NB_USER

RUN groupadd \
        --gid ${NB_UID} \
        ${NB_USER} && \
    useradd \
        --comment "Default user" \
        --create-home \
        --gid ${NB_UID} \
        --no-log-init \
        --shell /bin/bash \
        --uid ${NB_UID} \
        ${NB_USER}

# Base package installs are not super interesting to users, so hide their outputs
# If install fails for some reason, errors will still be printed
RUN apt-get -qq update && \
    apt-get -qq install --yes --no-install-recommends \
       less \
       unzip \
       > /dev/null && \
    apt-get -qq purge && \
    apt-get -qq clean && \
    rm -rf /var/lib/apt/lists/*

EXPOSE 8888

# Environment variables required for build
ENV APP_BASE /srv
ENV JULIA_PATH ${APP_BASE}/julia
ENV JULIA_VERSION 1.7.2

# ensure root user after build scripts
USER root

# Allow target path repo is cloned to be configurable
ARG REPO_DIR=${HOME}
ENV REPO_DIR ${REPO_DIR}
WORKDIR ${REPO_DIR}
RUN chown ${NB_USER}:${NB_USER} ${REPO_DIR}

# We want to allow two things:
#   1. If there's a .local/bin directory in the repo, things there
#      should automatically be in path
#   2. postBuild and users should be able to install things into ~/.local/bin
#      and have them be automatically in path
#
# The XDG standard suggests ~/.local/bin as the path for local user-specific
# installs. See https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
ENV PATH ${HOME}/.local/bin:${REPO_DIR}/.local/bin:${PATH}

ENV JULIA_PROJECT ${REPO_DIR}
# Run pre-assemble scripts! These are instructions that depend on the content
# of the repository but don't access any files in the repository. By executing
# them before copying the repository itself we can cache these steps. For
# example installing APT packages.

# ensure root user after preassemble scripts
USER root

# Copy stuff.
COPY --chown=1000:1000 src/ ${REPO_DIR}

# Run assemble scripts! These will actually turn the specification
# in the repository into an image.
USER ${NB_USER}
RUN JULIA_PROJECT="" julia -e "using Pkg; Pkg.add(\"Pluto\"); Pkg.build()"

# Container image Labels!
# Put these at the end, since we don't want to rebuild everything

LABEL repo2docker.ref="None"
LABEL repo2docker.repo="local"
LABEL repo2docker.version="2022.02.0"

# We always want containers to run as non-root
USER ${NB_USER}

# COPY repo2docker-entrypoint /usr/local/bin/repo2docker-entrypoint
# ENTRYPOINT ["/usr/local/bin/repo2docker-entrypoint"]

RUN echo 'using Pluto; Pluto.run(; host="0.0.0.0", port=8888, launch_browser=false, \
    require_secret_for_open_links=false, require_secret_for_access=false, \
    dismiss_update_notification=true, show_file_system=false)' > serve.jl

RUN pwd

# Specify the default command to run
CMD ["julia", "serve.jl"]
